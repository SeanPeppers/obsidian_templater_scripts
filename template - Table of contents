<%*
const currentFile = tp.file.path(true);
const currentFolder = tp.file.folder(true);

// Function to generate Table of Contents with alphabetically sorted headers
function generateTOC(folderPath) {
    let toc = '';
    const files = app.vault.getMarkdownFiles();
    const folders = new Set();

    // Gather all subfolder names
    files.forEach(file => {
        if (file.path.startsWith(folderPath) && file.path !== currentFile && !file.path.includes('/.trash/')) {
            const relativePath = file.path.substring(folderPath.length).split('/');
            if (relativePath.length > 1) {
                folders.add(relativePath[1]); // Add subfolder name
            }
        }
    });

    // Convert Set to Array and sort alphabetically
    const sortedFolders = Array.from(folders).sort();

    // Add TOC entries with headers for each sorted subfolder
    sortedFolders.forEach(folder => {
        toc += `### ${folder}\n`;
        files.forEach(file => {
            const relativePath = file.path.substring(folderPath.length).split('/');
            if (file.path.startsWith(folderPath) && file.path !== currentFile && !file.path.includes('/.trash/') && relativePath[1] === folder) {
                const link = `[[${file.basename}]]`;
                toc += `- ${link}\n`;
            }
        });
        toc += '\n'; // Add a blank line after each subfolder section
    });

    return toc;
}

const toc = generateTOC(currentFolder);

// Generate timestamp
const timestamp = new Date().toLocaleString();

// Output Table of Contents and timestamp
%>
## Table of Contents
<% toc %>

---

_Last updated: <%- timestamp %>_
